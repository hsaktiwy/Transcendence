import React, { useEffect, useState, useContext } from "react";
import { BsPhoneFlip } from "react-icons/bs";
import mailman from "@/utils/AxiosFetcher";
import { QrCode } from "lucide-react";
import { AxiosRequestConfig } from 'axios';
import { toast } from 'sonner'
import TfaVerifiedModal from "./TfaVerifiedModal";
import { UserContext } from "./UserContext";
function TwoFA(){
    const userContextConsumer = useContext(UserContext)
    if (!userContextConsumer)
        throw new Error("userContext must be used within a UserProvider");

    const [QR, setQRCode] = useState<string | undefined>(undefined)
    const [code, setCode] = useState<string | undefined>(undefined)
    const [disable2faModal, setdisbale2faModal] = useState<boolean>(false)
    const [verified2faModal, setVerified2faModal] = useState<boolean>(false)
    const getQR = async () => {
        try{
            const req: AxiosRequestConfig = {
                url: `/api/user/getqrcode/`,
                method: 'GET',
                responseType: 'blob'
            }
            const resp = await mailman(req)
            const qrUrl = URL.createObjectURL(resp.data);
            setQRCode(qrUrl)
            console.log(QR)
        }
        catch(err){
            console.log(err)
        }

    }
    useEffect(() =>{
        getQR()

    },[])

    const isOnlyDigits = (str:string) =>{
        return str.split('').every(char => char >='0' && char <='9')
    }
    const handleSubmit2fa = async () =>{
        if (code && !isOnlyDigits(code)){
            toast.error("The Verification Code must contain only digits")
        }
        else if (code  && code?.length !== 6 || !code){
            toast.error("The Verification Code must contain 6 digits")
        }
        else{
            try{
                const request = {
                    url: '/api/user/enable2fa/',
                    method: 'POST',
                    withCredentials: true,
                    data: {'otp_code': code}
                }
                const resp = await mailman(request)
                // userContextConsumer.setUserData( prev => ({...prev!, two_factor_auth: true,}))
                setVerified2faModal(true)
            }
            catch(err){
                toast.error("invalid verification code")
            }
        }
    }

    const handle2faInputChange = (e : React.ChangeEvent<HTMLInputElement>) =>{
        setCode(e.target.value.trim())
    }
    return(
        <div className=" px-10 py-10 sm:py-9 flex justify-center 2xl:justify-between relative flex-col 2xl:flex-row items-center 2xl:items-start gap-8 2xl:gap-0">
            {
                userContextConsumer.userData?.two_factor_auth &&
                <div className="absolute top-0 left-0 w-full h-full backdrop-filter backdrop-blur-lg z-40 flex justify-center items-center ">
                    <div className="bg-gradient-to-br from-[#323339] via-[#28292F] to-[#232628] text-white p-4 sm:p-10 rounded-xl text-center flex flex-col justify-center items-center gap-8 w-[700px]">
                        <h1 className="text-2xl font-semibold ">Two-Factory Authentication is already enabled</h1>
                        <button className=" bg-[#5E97A9]/70 px-4 py-2 rounded-xl  opacity-85 hover:opacity-100 hover:scale-105 duration-75" type="button">Disable 2fa</button>
                    </div>
                </div>
            }
            {
                verified2faModal && <TfaVerifiedModal dispatch={setVerified2faModal}/>
            }
                <h1 className="self-center text-3xl pt-4 text-center sm:text-start">Two-Factor Authentication</h1>
            <div className="flex gap-6 flex-col-reverse 2xl:flex-row items-center justify-center">
                <div className="tfa-container flex flex-col gap-6 w-full 2xl:w-[550px]">
                    <p className="text-white/80 text-lg ">Get verification code from Google Authenticator, it works even if your phone is offline. Scan the QR Code.</p>
                    <div className="flex gap-4 text-white/70">
                        <span className=" text-lg">
                            <BsPhoneFlip/>
                        </span>
                        <p> Enter the 6-digit code generated by your Authentication App</p>
                    </div>
                    <div className="  self-center 2xl:self-start flex gap-6 flex-wrap items-center justify-center">
                        <input  type='text' placeholder="Enter Verification Code" className=" w-[90%] sm:w-[300px] bg-black/35 backdrop-filter backdrop-blur-sm rounded-2xl py-2 px-4   outline-none focus:outline-1 focus:outline-[#5E97A9]" onChange={handle2faInputChange}/>
                        <button type='button' className=" bg-[#5E97A9]/70 px-4 py-2 rounded-xl  opacity-70 hover:opacity-100 hover:scale-105 duration-75 w-[90%] sm:w-auto" onClick={handleSubmit2fa}>Enable TFA</button>

                    </div>
                </div>
                <div className="w-[200px] h-[200px] p-4 2xl:p-8 border border-white/50 rounded-lg self-center">
                    {
                        QR ? <img src={QR} alt="qr-code" className="w-full h-full object-contain 2xl:object-cover"/> :
                        <div className="flex justify-center items-center h-full w-full ">
                            <div className="w-12 h-12 border-4 border-[#5E97A9] border-solid border-t-transparent rounded-full animate-spin"></div>
                        </div>
                    }
                    {/* <img src={QR} alt="qr-code" className="w-full h-full object-contain 2xl:object-cover"/>  */}
                    {/* <img src={QrCode} alt="qr-code" className="w-full h-full object-contain 2xl:object-cover"/> */}
                </div>
            </div>
        </div>
    )

}
export default TwoFA
